import os
import json
import logging
from playwright.sync_api import sync_playwright
from screenshot_utils import draw_browser_bar

def load_vk_cookies():
    with open('vk_storage.json', 'r', encoding='utf-8') as f:
        storage_data = json.load(f)
        return storage_data.get('cookies', [])

def take_screenshot_with_views(url, output_file):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        context = browser.new_context(viewport={"width": 1280, "height": 1000})

        cookies = load_vk_cookies()
        context.add_cookies(cookies)

        page = context.new_page()
        logging.info(f"–û—Ç–∫—Ä—ã–≤–∞—é –ø–æ—Å—Ç: {url}")
        try:
            page.goto(url, timeout=60000, wait_until="domcontentloaded")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            browser.close()
            return

        page.wait_for_timeout(4000)

        try:
            date_elem = page.locator('[data-testid="post_date_block_preview"]')
            if date_elem.count() > 0:
                date_elem.hover()
                page.wait_for_timeout(1500)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –¥–∞—Ç—É: {e}")

        try:
            post = page.locator('.Post, .wall_post_text, .post')
            if post.count() > 0:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞
                post_box = post.first.bounding_box()
                if post_box:
                    # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    page_width = page.evaluate("document.documentElement.scrollWidth") or 0
                    viewport_width = page.evaluate("window.innerWidth") or 0
                    if viewport_width <= 0:
                        viewport_width = 1280  # fallback to the configured viewport
                    if page_width <= 0:
                        page_width = viewport_width

                    full_width = max(page_width, viewport_width, 1200)  # –ú–∏–Ω–∏–º—É–º 1200px
                    clip_width = min(full_width, viewport_width)

                    post_center_x = post_box["x"] + post_box["width"] / 2
                    max_x_offset = max(page_width - clip_width, 0)
                    clip_x = max(0, min(post_center_x - clip_width / 2, max_x_offset))

                    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
                    expanded_area = {
                        "x": clip_x,
                        "y": max(0, post_box["y"] - 50),  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                        "width": clip_width,
                        "height": post_box["height"] + 100  # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
                    }
                    
                    page.screenshot(path=output_file, clip=expanded_area)
                    logging.info(f"üì∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å—Ç–∞: {output_file}")
                else:
                    # Fallback: —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
                    post.first.screenshot(path=output_file)
            else:
                page.screenshot(path=output_file, full_page=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω–∞: {e}")
        finally:
            browser.close()

    draw_browser_bar(output_file, url)

def batch_screenshots(posts, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    for i, post in enumerate(posts):
        url = post['–°—Å—ã–ª–∫–∞']
        file_name = f"post_{i+1}.png"
        file_path = os.path.join(output_dir, file_name)
        logging.info(f"[{i+1}/{len(posts)}] –°–∫—Ä–∏–Ω—à–æ—Ç: {url} -> {file_path}")
        take_screenshot_with_views(url, file_path)
        post['–°–∫—Ä–∏–Ω—à–æ—Ç'] = file_path

# ads_screenshot.py
from playwright.sync_api import sync_playwright
from vk_ads_context import create_vk_ads_context
import os
import time
import logging

###############################################################################
#  VK Ads ‚Äî automatic screenshots with **strict** ad-plan matching            #
###############################################################################
#  Stores every PNG into *output_dir*.                                        #
#  Extra shots for the ¬´overview¬ª tab:                                        #
#       ‚ñ∏ traffic graph   ‚Üí *_overview_graph.png (with TopLine)               #
#       ‚ñ∏ conversion funnel ‚Üí *_overview_funnel.png (caption + chart only)    #
###############################################################################

__all__ = ["screenshot_group_stats"]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def _safe_mkdir(path: str):
    if path and not os.path.exists(path):
        os.makedirs(path, exist_ok=True)


def _scroll_to_bottom(page, step: int = 700):
    page.evaluate(
        """
        async step => {
            for (let y = 0; y < document.body.scrollHeight; y += step) {
                window.scrollTo({top: y, behavior: 'instant'});
                await new Promise(r => setTimeout(r, 120));
            }
            window.scrollTo({top: document.body.scrollHeight, behavior: 'instant'});
        }
        """,
        step,
    )
    page.wait_for_timeout(400)


def _is_captcha(page):
    return (
        page.locator(
            'input[name="captcha_key"], .page_block_captcha, [id*="captcha"], :text("–Ø –Ω–µ —Ä–æ–±–æ—Ç")'
        ).count()
        > 0
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ shot helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def _topline_loc(page):
    return page.locator("div[class^='TopLine_topline']").first


def _union_clip(a: dict, b: dict):
    x1, y1 = min(a["x"], b["x"]), min(a["y"], b["y"])
    x2 = max(a["x"] + a["width"], b["x"] + b["width"])
    y2 = max(a["y"] + a["height"], b["y"] + b["height"])
    return {"x": int(x1), "y": int(y1), "width": int(x2 - x1), "height": int(y2 - y1)}


def _shot_with_topline(page, target, path):
    try:
        top = _topline_loc(page)
        if not top.count():
            target.screenshot(path=path)
            return
        target.scroll_into_view_if_needed()
        page.wait_for_timeout(500)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        bt, bb = top.bounding_box(), target.bounding_box()
        if bt is None or bb is None:
            target.screenshot(path=path)
            return
        page.screenshot(path=path, clip=_union_clip(bt, bb))
    except Exception as e:
        logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å TopLine: {e}")
        target.screenshot(path=path)


def _shot_with_caption(page, caption, target, path):
    try:
        caption.scroll_into_view_if_needed()
        target.scroll_into_view_if_needed()
        page.wait_for_timeout(400)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        bc, bt = caption.bounding_box(), target.bounding_box()
        if bc is None or bt is None:
            target.screenshot(path=path)
            return
        page.screenshot(path=path, clip=_union_clip(bc, bt))
    except Exception as e:
        logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å—å—é: {e}")
        target.screenshot(path=path)


def _shot_demography_section(page, path, demography_zoom=1.0):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ –Ω–∏–∂–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Args:
        page: Playwright page –æ–±—ä–µ–∫—Ç
        path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        demography_zoom: –ú–∞—Å—à—Ç–∞–± –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0 - –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        original_zoom = None
        if demography_zoom != 1.0:
            original_zoom = page.evaluate("document.body.style.zoom")
            page.evaluate(f"document.body.style.zoom = '{demography_zoom}'")
            page.wait_for_timeout(1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page.evaluate("window.scrollTo(0, 0)")
        page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏ - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        main_container_selectors = [
            "div[class*='ViewPoints'][class*='layout']",
            "div.ViewPoints\\.module_layout__YWJjY", 
            "div[class^='ViewPoints_layout']",
            "div[class^='ViewPoints_main']"
        ]
        
        main_container = None
        for selector in main_container_selectors:
            container = page.locator(selector).first
            if container.count():
                main_container = container
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {selector}")
                break
        
        if main_container:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            page.wait_for_timeout(2000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–º–ø–∞–Ω–∏–∏ 
            title_selectors = [
                "span[class*='TopLine'][class*='title']:has-text('–¶–†25')",
                "span.TopLine\\.module_title__XzA2Y:has-text('–¶–†25')",
                "span:has-text('–¶–†25_')"
            ]
            
            title_element = None
            for selector in title_selectors:
                title_element = page.locator(selector).first
                if title_element.count():
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {selector}")
                    break
            
            # –ò—â–µ–º –Ω–∏–∂–Ω–∏–µ –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
            bottom_selectors = [
                "div[class*='Compare'][class*='layout']",
                "div.Compare\\.module_layout__YzVmZ",
                "div[class*='Demography'][class*='wrap']", 
                "div.Demography\\.module_wrap__YjkyN"
            ]
            
            bottom_elements = []
            for selector in bottom_selectors:
                elements = page.locator(selector).all()
                bottom_elements.extend(elements)
            
            if bottom_elements:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bottom_elements)} –±–ª–æ–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                bottom_element = bottom_elements[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            else:
                bottom_element = None
            
            if title_element and title_element.count() and bottom_element:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É 
                title_element.scroll_into_view_if_needed()
                page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                title_box = title_element.bounding_box()
                bottom_box = bottom_element.bounding_box()
                
                if title_box and bottom_box:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    viewport_width = page.evaluate("window.innerWidth")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    content_left = min(title_box["x"], bottom_box["x"])
                    start_x = max(0, content_left - 20)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                    
                    # –®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –≤–∏–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    content_right = max(title_box["x"] + title_box["width"], 
                                      bottom_box["x"] + bottom_box["width"])
                    content_width = min(content_right - start_x + 40, viewport_width - start_x)
                    
                    # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    start_y = max(0, title_box["y"] - 20)
                    end_y = bottom_box["y"] + bottom_box["height"] + 20
                    content_height = end_y - start_y
                    
                    content_area = {
                        "x": int(start_x),
                        "y": int(start_y),
                        "width": int(content_width),
                        "height": int(content_height)
                    }
                    
                    logging.info(f"üìê –û–±–ª–∞—Å—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: x={content_area['x']}, y={content_area['y']}, w={content_area['width']}, h={content_area['height']}")
                    
                    page.screenshot(path=path, clip=content_area)
                    logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
                    return
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        logging.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        if main_container:
            main_container.scroll_into_view_if_needed()
            page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            main_container.screenshot(path=path)
            logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
        else:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–µ—Å—å viewport
            page.screenshot(path=path)
            logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
        
    except Exception as e:
        logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        page.screenshot(path=path)
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        if original_zoom is not None:
            try:
                page.evaluate(f"document.body.style.zoom = '{original_zoom if original_zoom else 'initial'}'")
            except:
                pass


def _shot_geo_section(page, path, geo_zoom=1.0):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
    
    Args:
        page: Playwright page –æ–±—ä–µ–∫—Ç
        path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        geo_zoom: –ú–∞—Å—à—Ç–∞–± –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0 - –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        original_zoom = None
        if geo_zoom != 1.0:
            original_zoom = page.evaluate("document.body.style.zoom")
            page.evaluate(f"document.body.style.zoom = '{geo_zoom}'")
            page.wait_for_timeout(1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page.evaluate("window.scrollTo(0, 0)")
        page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–∞—Ä—Ç—ã —á–∞—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ API)
        try:
            logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            page.wait_for_load_state("networkidle", timeout=6000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            logging.info("‚úÖ –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except Exception:
            logging.warning("‚ö†Ô∏è  Timeout —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        geo_container_selectors = [
            "div[class*='ViewPoints'][class*='layout']",
            "div.ViewPoints\\.module_layout__YWJjY",
            "div[class^='ViewPoints_layout']",
            "div[class^='ViewPoints_main']"
        ]
        
        main_container = None
        for selector in geo_container_selectors:
            container = page.locator(selector).first
            if container.count():
                main_container = container
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: {selector}")
                break
        
        if main_container:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            main_container.scroll_into_view_if_needed()
            page.wait_for_timeout(1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç—ã
            logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã...")
            map_selectors = [
                "canvas.mmrgl-canvas",  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è VK Maps
                "div.mmrgl-map",        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
                "canvas",               # –û–±—â–∏–π canvas —ç–ª–µ–º–µ–Ω—Ç
                "div[class*='GeoMap']", # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã
                "div[class*='map']"     # –õ—é–±–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å map
            ]
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            map_loaded = False
            for attempt in range(16):  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ (–±—ã–ª–æ 8)
                for selector in map_selectors:
                    map_elements = page.locator(selector)
                    if map_elements.count() > 0:
                        logging.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector} ({map_elements.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                        map_loaded = True
                        break
                
                if map_loaded:
                    break
                    
                logging.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/16 - –∂–¥–µ–º –∫–∞—Ä—Ç—É...")
                page.wait_for_timeout(2000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            
            if not map_loaded:
                logging.warning("‚ö†Ô∏è  –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
            page.wait_for_timeout(3000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ JavaScript
            try:
                page.evaluate("""
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
                    const mapElements = document.querySelectorAll('canvas, [class*="map"], [class*="Map"]');
                    mapElements.forEach(el => {
                        if (el.style) el.style.display = 'none';
                        setTimeout(() => { if (el.style) el.style.display = ''; }, 100);
                    });
                    // Trigger resize event
                    window.dispatchEvent(new Event('resize'));
                """)
                page.wait_for_timeout(2000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            except Exception:
                pass
            
            logging.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            container_box = main_container.bounding_box()
            
            if container_box:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏
                viewport_width = page.evaluate("window.innerWidth")
                viewport_height = page.evaluate("window.innerHeight")
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                start_x = max(0, container_box["x"] - 10)
                start_y = max(0, container_box["y"] - 10)
                content_width = min(container_box["width"] + 20, viewport_width - start_x)
                content_height = min(container_box["height"] + 20, viewport_height - start_y)
                
                content_area = {
                    "x": int(start_x),
                    "y": int(start_y), 
                    "width": int(content_width),
                    "height": int(content_height)
                }
                
                logging.info(f"üìê –û–±–ª–∞—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: x={content_area['x']}, y={content_area['y']}, w={content_area['width']}, h={content_area['height']}")
                
                page.screenshot(path=path, clip=content_area)
                logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
                return
            else:
                # Fallback: —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                main_container.screenshot(path=path)
                logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
                return
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logging.warning("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        page.screenshot(path=path)
        logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: {path}")
        
    except Exception as e:
        logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        page.screenshot(path=path)
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        if original_zoom is not None:
            try:
                page.evaluate(f"document.body.style.zoom = '{original_zoom if original_zoom else 'initial'}'")
            except:
                pass


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main routine ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def screenshot_group_stats(
    group_name: str,
    output_dir: str,
    ads_url: str,
    tabs: tuple[str, ...] | None = ("overview", "demography", "geo"),
    viewport_width: int = 1920,
    viewport_height: int = 1080,
    zoom_level: float = 0.8,
    demography_zoom: float = 0.6,
    geo_zoom: float = 0.8,
):
    """Save screenshots of *group_name* stats into *output_dir*.
    
    Args:
        group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        ads_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK Ads
        tabs: –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        viewport_width: –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1920)
        viewport_height: –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1080)
        zoom_level: –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.8)
        demography_zoom: –ú–∞—Å—à—Ç–∞–± –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.6)
        geo_zoom: –ú–∞—Å—à—Ç–∞–± –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.8)
    """

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    _safe_mkdir(output_dir)
    logging.info(f"üìÅ –ü–∞–ø–∫–∞ {output_dir} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

    with sync_playwright() as p:
        ctx = create_vk_ads_context(
            p,
            storage_state="vk_storage.json",
            viewport={"width": viewport_width, "height": viewport_height},
        )
        try:
            page = ctx.new_page()
    
            print(f"‚û°Ô∏è  Opening VK Ads: {ads_url}")
            page.goto(ads_url, timeout=60_000)
            try:
                page.wait_for_load_state("networkidle", timeout=10_000)
            except Exception:
                logging.warning("‚ö†Ô∏è  networkidle wasn't reached ‚Äì continuing ‚Ä¶")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            page.evaluate(f"document.body.style.zoom = '{zoom_level}'")
            page.wait_for_timeout(6_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
    
            # Captcha -----------------------------------------------------------
            if _is_captcha(page):
                logging.warning("üõë Captcha detected ‚Äì solve it ‚Ä¶")
                page.wait_for_timeout(30_000)
                ctx.storage_state(path="vk_storage.json")
    
            # Search ------------------------------------------------------------
            def _apply_search(q: str):
                logging.info(f"üîç –ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: '{q}'")
    
                search_selectors = [
                    "input[type='search']",
                    "input[placeholder*='–ü–æ–∏—Å–∫']",
                    "input[placeholder*='–ø–æ–∏—Å–∫']",
                    "[data-testid*='search'] input",
                    ".search input",
                    "input[name*='search']",
                ]
    
                inp = None
                for selector in search_selectors:
                    inp = page.locator(selector).first
                    if inp.count() > 0:
                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: {selector}")
                        break
    
                if not inp or inp.count() == 0:
                    logging.error("‚ùå –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞")
                    return False
    
                try:
                    inp.click()
                    page.wait_for_timeout(1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                    inp.fill("")
                    page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                    inp.fill(q)
                    page.wait_for_timeout(1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                    page.keyboard.press("Enter")
                    page.wait_for_timeout(4_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
    
                    contains = page.locator(
                        "[data-testid='search-contains-menu-item']"
                    ).first
                    if contains.count():
                        contains.click()
                        page.wait_for_timeout(2_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                        logging.info("‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç '—Å–æ–¥–µ—Ä–∂–∏—Ç'")
    
                    return True
                except Exception as e:
                    logging.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                    return False
    
            # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            group_name_upper = group_name.upper()
            _apply_search(group_name_upper)
            page.wait_for_timeout(4_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
    
            # –ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ----------------------------------------
            logging.info(f"üîç –ò—â–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–ª–∞–Ω '{group_name_upper}' –≤ —Ç–∞–±–ª–∏—Ü–µ...")
    
            link_selectors = [
                f"[data-testid='name-link']:has-text('{group_name_upper}')",
                f"a:has-text('{group_name_upper}')",
                f"[data-testid='name-link']",
                f"td a:has-text('{group_name_upper}')",
                f"tr:has-text('{group_name_upper}') [data-testid='name-link']",
            ]
    
            link = None
            for selector in link_selectors:
                link = page.locator(selector).first
                if link.count() > 0 and group_name_upper in (link.text_content() or "").upper():
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω: {link.text_content().strip()}")
                    break
    
            if not link or link.count() == 0:
                raise RuntimeError(
                    f"‚ùå –†–µ–∫–ª–∞–º–Ω—ã–π –ø–ª–∞–Ω '{group_name_upper}' –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                )
    
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
            row = link.locator("xpath=ancestor::tr").first
            if row.count() == 0:
                row = link.locator("..").locator("..").first
    
            try:
                row.scroll_into_view_if_needed(timeout=20_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                page.wait_for_timeout(800)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫ —Å—Ç—Ä–æ–∫–µ: {e}")
    
            # ‚îÄ‚îÄ‚îÄ –ù–æ–≤–æ–µ: —Ö–æ–≤–µ—Ä–∏–º —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                row.hover(timeout=10_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                page.wait_for_timeout(600)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                logging.info("üñ±Ô∏è  –ù–∞–≤–µ–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Ç—Ä–æ–∫—É –ø–ª–∞–Ω–∞ ‚Äî –∏–∫–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Ç—Ä–æ–∫—É: {e}")
    
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ --------------------------------------
            logging.info("üìä –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
            stats_selectors = [
                "a[data-testid='stats']",
                "[data-testid='stats']",
                "button[title*='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']",
                "a[title*='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']",
                "svg.vkuiIcon--poll_outline_20",
                "svg[class*='poll_outline']",
                "svg[aria-label*='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']",
                "button:has(svg[class*='poll_outline'])",
            ]
    
            def _find_stats_button(scope):
                for sel in stats_selectors:
                    btn = scope.locator(sel).first
                    if btn.count() > 0:
                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {sel}")
                        return btn
                return None
    
            btn = _find_stats_button(row) or _find_stats_button(page)
            if not btn:
                # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫–∏–µ svg-–∏–∫–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ
                svgs = row.locator("svg").all()
                logging.warning(f"‚ùî –í —Å—Ç—Ä–æ–∫–µ –Ω–∞–π–¥–µ–Ω–æ SVG-–∏–∫–æ–Ω–æ–∫: {len(svgs)}")
                for i, svg in enumerate(svgs[:5], 1):
                    try:
                        logging.info(f"  {i}. {svg.get_attribute('class')}")
                    except Exception:
                        pass
                raise RuntimeError(
                    "‚ùå –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                )
    
            try:
                btn.click()
                page.wait_for_timeout(8_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                logging.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
            except Exception as e:
                raise RuntimeError(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}") from e
    
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            _safe_mkdir(output_dir)
    
            # Iterate tabs --------------------------------------------------
            for tab in tabs or ("overview",):
                logging.info(f"üìë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É: {tab}")
    
                tab_btn = page.locator(f"#tab_{tab}")
                if tab_btn.count():
                    tab_btn.click()
                    if tab == "geo":
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (–∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ)
                        logging.info("‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç...")
                        page.wait_for_timeout(6_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                    else:
                        page.wait_for_timeout(2_000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
                    logging.info(f"‚úÖ –í–∫–ª–∞–¥–∫–∞ {tab} –æ—Ç–∫—Ä—ã—Ç–∞")
                else:
                    logging.warning(f"‚ö†Ô∏è  –í–∫–ª–∞–¥–∫–∞ '{tab}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
    
                if tab == "overview":
                    # –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
                    caption = page.locator("text=–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π").first
                    funnel_selectors = [
                        "div[class*='ConversionsChart'][class*='wrap']",
                        "div[class^='ConversionsChart_wrap']",
                        "div[class^='ConversionsChart.module_wrap']",
                        "div.ConversionsChart\\.module_wrap__XzgxY"
                    ]
                    
                    funnel = None
                    for selector in funnel_selectors:
                        funnel = page.locator(selector).first
                        if funnel.count() > 0:
                            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ—Ä–æ–Ω–∫–∏: {selector}")
                            break
                    
                    if caption.count() and funnel and funnel.count():
                        funnel_path = os.path.join(
                            output_dir, f"{group_name_upper}_overview_funnel.png"
                        )
                        _shot_with_caption(page, caption, funnel, funnel_path)
                        logging.info(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {funnel_path}")
                    else:
                        logging.warning(f"‚ö†Ô∏è  –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name_upper}")
                        logging.warning(f"   Caption found: {caption.count() > 0}")
                        logging.warning(f"   Funnel found: {funnel.count() > 0 if funnel else False}")
                elif tab == "demography":
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    tab_path = os.path.join(output_dir, f"{group_name_upper}_{tab}.png")
                    _safe_mkdir(output_dir)
                    _shot_demography_section(page, tab_path, demography_zoom)
                elif tab == "geo":
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
                    tab_path = os.path.join(output_dir, f"{group_name_upper}_{tab}.png")
                    _safe_mkdir(output_dir)
                    _shot_geo_section(page, tab_path, geo_zoom)
                elif tab != "overview":
                    # –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫)
                    _scroll_to_bottom(page)
                    tab_path = os.path.join(output_dir, f"{group_name_upper}_{tab}.png")
                    _safe_mkdir(output_dir)
                    page.screenshot(path=tab_path, full_page=True)
                    logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {tab_path}")
    
            logging.info("‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã VK Ads —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        finally:
            ctx.close()

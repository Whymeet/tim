from post_loader import load_posts
from vk_screenshot import batch_screenshots
from ads_screenshot import screenshot_group_stats
from report_generator import generate_report
import os
import logging
import sys
from datetime import datetime


def main() -> None:
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∂–∞–µ–º XLSX, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—ã –ø–æ—Å—Ç–æ–≤ –∏ VK Ads, —Ñ–æ—Ä–º–∏—Ä—É–µ–º Word‚Äë–æ—Ç—á—ë—Ç."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_filename = f"vk_ads_log_{timestamp}.txt"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã VK Ads Report Generator")
    logger.info(f"üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_filename}")

    posts_file = "posts.xlsx"
    output_dir = "assets"
    output_doc = "–û—Ç—á–µ—Ç.docx"
    ads_url = (
        "https://ads.vk.com/hq/dashboard/ad_groups"
        "?sudo=vkads_3012708486%40mailru"
        "&mode=ads&attribution=conversion"
        "&date_from=01.08.2025&date_to=31.08.2025"
        "&sort=-created"
    )

    os.makedirs(output_dir, exist_ok=True)
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {output_dir}")

    logger.info("‚è≥ –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É‚Ä¶")
    posts = load_posts(posts_file)
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(posts)} —Å—Ç—Ä–æ–∫ / —Å—Å—ã–ª–æ–∫")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
    valid_posts = []
    skipped_count = 0
    
    for idx, post in enumerate(posts, 1):
        group_name = (post.get("–ì—Ä—É–ø–ø–∞") or "").strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–¥–µ—Ä–∂–∏—Ç "–¶–†25"
        if not group_name or "–¶–†25" not in group_name.upper():
            skipped_count += 1
            logger.error(f"SKIPPED_NO_GROUP_NAME: [{idx}] –°—Å—ã–ª–∫–∞ {post.get('–°—Å—ã–ª–∫–∞', 'N/A')} - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¶–†25, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            continue
            
        valid_posts.append(post)
    
    if skipped_count > 0:
        logger.warning(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} —Å—Ç—Ä–æ–∫ –±–µ–∑ –¶–†25 –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏. –ò—â–∏—Ç–µ –ø–æ 'SKIPPED_NO_GROUP_NAME' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    logger.info(f"‚úÖ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(valid_posts)} —Å—Ç—Ä–æ–∫ —Å –¶–†25 –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø")

    if not valid_posts:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¶–†25 –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã!")
        return

    logger.info("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—ã –ø–æ—Å—Ç–æ–≤‚Ä¶")
    batch_screenshots(valid_posts, output_dir)
    logger.info("‚úÖ –°–∫—Ä–∏–Ω—ã –ø–æ—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã")

    done_groups: set[str] = set()
    successful_groups: set[str] = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    
    for idx, post in enumerate(valid_posts, 1):
        group_name = post.get("–ì—Ä—É–ø–ø–∞", "").upper()
        if group_name in done_groups:
            continue

        logger.info(f"üìä [{idx}/{len(valid_posts)}] VK Ads –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}'‚Ä¶")
        try:
            screenshot_group_stats(
                group_name, 
                output_dir, 
                ads_url,
                demography_zoom=1.0,  # –ë–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
                geo_zoom=1.0,         # –ë–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏
                viewport_width=1920,
                viewport_height=1200
            )
            done_groups.add(group_name)
            successful_groups.add(group_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —É—Å–ø–µ—à–Ω—ã–µ
            logger.info(f"   ‚úÖ –ì–æ—Ç–æ–≤–æ - –≥—Ä—É–ø–ø–∞ {group_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç")
        except Exception as e:
            logger.error(f"   ‚ùå –ù–µ –≤—ã—à–ª–æ: {e}")
            logger.warning(f"   üö´ –ì—Ä—É–ø–ø–∞ {group_name} –ù–ï –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç")
            done_groups.add(group_name)  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é, –Ω–æ –ù–ï –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–∫—Ä–∏–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    posts_for_report = []
    skipped_campaigns = 0
    
    for post in valid_posts:
        group_name = post.get("–ì—Ä—É–ø–ø–∞", "").upper()
        if group_name in successful_groups:
            posts_for_report.append(post)
        else:
            skipped_campaigns += 1
            logger.warning(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–∞–º–ø–∞–Ω–∏—é '{post.get('–ì—Ä—É–ø–ø–∞', 'N/A')}' –∏–∑ –æ—Ç—á–µ—Ç–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    if skipped_campaigns > 0:
        logger.warning(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_campaigns} –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ –æ—Ç—á–µ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    logger.info(f"üìù –°–æ–±–∏—Ä–∞—é DOCX –¥–ª—è {len(posts_for_report)} —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π‚Ä¶")
    try:
        generate_report(posts_for_report, output_doc, assets_dir=output_dir, inner_image="inner.png")
    except TypeError:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        generate_report(posts_for_report, output_doc)

    logger.info("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")
    logger.info("üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


if __name__ == "__main__":
    main()
